// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Robot.h"
#include "Joystick.h"
#include "CameraServer.h"
#include "Commands/CameraDown.h"
#include "Commands/CameraLeft.h"
#include "Commands/CameraRight.h"
#include "Commands/CameraUp.h"
#include "SmartDashboard/SmartDashboard.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION
Drive* Robot::drive = 0;
Camera* Robot::camera = 0;
Elevator* Robot::elevator = 0;
OI* Robot::oi = 0;
bool waka = true;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION

void Robot::RobotInit() {
	RobotMap::init();
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	holding = -0.15;
	drive = new Drive();
	camera = new Camera();
	elevator = new Elevator();
	Wikity = new Encoder(0,1);
	SwitchA = new DigitalInput(2);
	SwitchB = new DigitalInput(3);
	SwitchC = new DigitalInput(4);
	TopLimit = new DigitalInput(5);
	BotLimit = new DigitalInput(6);
	CameraServer::GetInstance()->StartAutomaticCapture("cam0");

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	// This MUST be here. If the OI creates Commands (which it very likely
	// will), constructing it during the construction of CommandBase (from
	// which commands extend), subsystems are not guaranteed to be
	// yet. Thus, their requires() statements may grab null pointers. Bad
	// news. Don't move it.
	oi = new OI();
	lw = LiveWindow::GetInstance();

	// instantiate the command used for the autonomous period
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
	autonomousCommand = new AutonomousCommand();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
  }

/**
 * This function is called when the disabled button is hit.
 * You can use it to reset subsystems before shutting down.
 */
void Robot::DisabledInit(){

}

void Robot::DisabledPeriodic() {
	Scheduler::GetInstance()->Run();
}

void Robot::AutonomousInit() {

	autonTimer = new Timer();
	autonTimer->Start();
	if (autonomousCommand != NULL)
		autonomousCommand->Start();
}

void Robot::AutonomousPeriodic() {
if (SwitchA->Get() == false && SwitchB->Get() == true && SwitchC->Get() == true ){
	if (autonTimer->Get() < 3){

		//int encod = Wikity->Get();
			//while (encod > 0){
		//elevator->speedController1->Set(-1);
	//}
//}else if (autonTimer->Get() < 4)
	//{
		//elevator->speedController1->Set(0);
		drive->robotDrive->ArcadeDrive(.40,-0,false);

		}else if (autonTimer->Get() >= 3)
		{
		drive->robotDrive->ArcadeDrive(0,0,false);

		}
} else if (SwitchA->Get() == true && SwitchB->Get() == true && SwitchC->Get() == true ){
	if (autonTimer->Get() < 2){

			int encod = Wikity->Get();
				if (encod > -750){
					if (TopLimit->Get() == false && BotLimit->Get() == false){
			elevator->speedController1->Set(-1);
					}
		}else if(encod <= -750){

			elevator->speedController1->Set(holding);
		}
	}else if (autonTimer->Get() < 5)
		{
			elevator->speedController1->Set(holding);
			drive->robotDrive->ArcadeDrive(.40,0.012,false);

			}else if (autonTimer->Get() >= 5)
			{
			drive->robotDrive->ArcadeDrive(0,0,false);

			}
}else if (SwitchA->Get() == false && SwitchB->Get() == true && SwitchC->Get() == false ){
	if (autonTimer->Get() < 2){

			int encod = Wikity->Get();
				while (encod > -150){
					if (TopLimit->Get() == false && BotLimit->Get() == false){
			elevator->speedController1->Set(-1);
					}
		}
	}else if (autonTimer->Get() < 5)
		{
			elevator->speedController1->Set(holding);
			drive->robotDrive->ArcadeDrive(.40,-0,false);

			}else if (autonTimer->Get() < 7)
			{
			drive->robotDrive->ArcadeDrive(0,0,false);
			int encod = Wikity->Get();
			while (encod < 400){
				if (TopLimit->Get() == false && BotLimit->Get() == false){
					elevator->speedController1->Set(1);
				}
				}
			}else if (autonTimer->Get() <= 9){
				elevator->speedController1->Set(0);
			}
}


}

void Robot::TeleopInit() {
	// This makes sure that the autonomous stops running when
	// teleop starts running. If you want the autonomous to 
	// continue until interrupted by another command, remove
	// these lines or comment it out.
	if (autonomousCommand != NULL)
		autonomousCommand->Cancel();
}

void Robot::TeleopPeriodic() {
	Scheduler::GetInstance()->Run();
	oi->getJoystick1()->SetAxisChannel(Joystick::kYAxis, 1);

	int enc = Wikity->Get();
	SmartDashboard::PutNumber("EncValue",enc);
	SmartDashboard::PutNumber("PovVal",oi->getJoystick2()->GetPOV(0));

	SmartDashboard::PutBoolean("DI2", SwitchA->Get());
	SmartDashboard::PutBoolean("DI3", SwitchB->Get());
	SmartDashboard::PutBoolean("DI4", SwitchC->Get());

	//SmartDashboard::CheckDigitalChannel(2);
	//SmartDashboard::CheckDigitalChannel(3);
	//SmartDashboard::CheckDigitalChannel(4);

	float y =0;
	float x = 0;
	waka = oi->turbo->Get();
	if (waka == true){
	x = (oi->getJoystick1()->GetRawAxis(1));
	}else{
	x = (oi->getJoystick1()->GetRawAxis(1) *.75);
	}

	y = ((oi->getJoystick1()->GetRawAxis(4))*.45);


	drive->robotDrive->ArcadeDrive(-x,-y,true);

	//if (oi->getJoystick2()->GetY() > .1 || oi->getJoystick2()->GetY() < -.1){
	if (TopLimit->Get() == false && BotLimit->Get() == false){
		elevator->speedController1->Set((oi->getJoystick2()->GetY())*2,0);
	}else if(TopLimit->Get() == true && BotLimit->Get() == false){
		elevator->speedController1->Set(((abs(oi->getJoystick2()->GetY()))*2,0));
	}else if(TopLimit->Get() == false && BotLimit->Get() == true){
		elevator->speedController1->Set(((-abs(oi->getJoystick2()->GetY()))*2,0));
	}
	//}
	int povValue = oi->getJoystick2()->GetPOV(0);

}


void Robot::TestPeriodic() {
	lw->Run();
}

START_ROBOT_CLASS(Robot);

