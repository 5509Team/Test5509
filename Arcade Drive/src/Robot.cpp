// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Robot.h"
#include "Joystick.h"
#include "CameraServer.h"
#include "Commands/CameraDown.h"
#include "Commands/CameraLeft.h"
#include "Commands/CameraRight.h"
#include "Commands/CameraUp.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION
Drive* Robot::drive = 0;
Camera* Robot::camera = 0;
Elevator* Robot::elevator = 0;
OI* Robot::oi = 0;
bool waka = true;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION

void Robot::RobotInit() {
	RobotMap::init();
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	drive = new Drive();
	camera = new Camera();
	elevator = new Elevator();
	CameraServer::GetInstance()->StartAutomaticCapture("cam0");

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	// This MUST be here. If the OI creates Commands (which it very likely
	// will), constructing it during the construction of CommandBase (from
	// which commands extend), subsystems are not guaranteed to be
	// yet. Thus, their requires() statements may grab null pointers. Bad
	// news. Don't move it.
	oi = new OI();
	lw = LiveWindow::GetInstance();

	// instantiate the command used for the autonomous period
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
	autonomousCommand = new AutonomousCommand();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
  }

/**
 * This function is called when the disabled button is hit.
 * You can use it to reset subsystems before shutting down.
 */
void Robot::DisabledInit(){

}

void Robot::DisabledPeriodic() {
	Scheduler::GetInstance()->Run();
}

void Robot::AutonomousInit() {
	if (autonomousCommand != NULL)
		autonomousCommand->Start();
}

void Robot::AutonomousPeriodic() {
	Scheduler::GetInstance()->Run();
}

void Robot::TeleopInit() {
	// This makes sure that the autonomous stops running when
	// teleop starts running. If you want the autonomous to 
	// continue until interrupted by another command, remove
	// these lines or comment it out.
	if (autonomousCommand != NULL)
		autonomousCommand->Cancel();
}

void Robot::TeleopPeriodic() {
	Scheduler::GetInstance()->Run();
	oi->getJoystick1()->SetAxisChannel(Joystick::kYAxis, 1);

	float y =0;
	float x = 0;
	waka = oi->turbo->Get();
	if (waka == true){
	x = (oi->getJoystick1()->GetRawAxis(1));
	}else{
	x = (oi->getJoystick1()->GetRawAxis(1) *.75);
	}

	y = ((oi->getJoystick1()->GetRawAxis(4))*.65);


	drive->robotDrive->ArcadeDrive(-x,-y,true);

	elevator->speedController1->Set((oi->getJoystick2()->GetY())*2,0);

	int povValue = oi->getJoystick2()->GetPOV(0);
//	unsigned int povValue1 = oi->getJoystick2()->GetPOV(1);

//	if(povValue1 > -1)
//	{
//
//	}

	switch (povValue)
	{
	case 0:
		break;
	case 1:
		new CameraUp();
		break;
	case 2:
		new CameraUp();
		new CameraRight();
		break;
	case 3:
		new CameraRight();
		break;
	case 4:
		new CameraRight();
		new CameraDown();
		break;
	case 5:
		new CameraDown();
		break;
	case 6:
		new CameraDown();
		new CameraLeft();
		break;
	case 7:
		new CameraLeft();
		break;
	case 8:
		new CameraLeft();
		new CameraUp();
		break;
	}
}


void Robot::TestPeriodic() {
	lw->Run();
}

START_ROBOT_CLASS(Robot);

