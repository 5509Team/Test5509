// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Robot.h"
#include "Joystick.h"
#include "CameraServer.h"
#include "Commands/CameraDown.h"
#include "Commands/CameraLeft.h"
#include "Commands/CameraRight.h"
#include "Commands/CameraUp.h"
#include "Commands/CamCent.h"
#include "SmartDashboard/SmartDashboard.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION
Drive* Robot::drive = 0;
Camera* Robot::camera = 0;
Elevator* Robot::elevator = 0;
OI* Robot::oi = 0;
bool waka = true;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION

void Robot::RobotInit() {
	RobotMap::init();
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	holding = -0.15;
	drive = new Drive();
	camera = new Camera();
	elevator = new Elevator();
	Wikity = new Encoder(0,1);
	SwitchA = new DigitalInput(2);
	SwitchB = new DigitalInput(3);
	SwitchC = new DigitalInput(4);
	TopLimit = new DigitalInput(5);
	BotLimit = new DigitalInput(6);
	float speed;
	CameraServer::GetInstance()->StartAutomaticCapture("cam0");
	previousspeed = 0;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	// This MUST be here. If the OI creates Commands (which it very likely
	// will), constructing it during the construction of CommandBase (from
	// which commands extend), subsystems are not guaranteed to be
	// yet. Thus, their requires() statements may grab null pointers. Bad
	// news. Don't move it.
	oi = new OI();
	lw = LiveWindow::GetInstance();

	// instantiate the command used for the autonomous period
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
	autonomousCommand = new AutonomousCommand();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
  }

/**
 * This function is called when the disabled button is hit.
 * You can use it to reset subsystems before shutting down.
 */
void Robot::DisabledInit(){

}

void Robot::DisabledPeriodic() {
	Scheduler::GetInstance()->Run();
}

void Robot::AutonomousInit() {

	autonTimer = new Timer();
	autonTimer->Start();
	if (autonomousCommand != NULL)
		autonomousCommand->Start();
}

void Robot::AutonomousPeriodic() {
	if (SwitchA->Get() == false && SwitchB->Get() == false && SwitchC->Get() == false ){
		//Drive into auto Zone -Stop
		if (autonTimer->Get() < 2){
			drive->robotDrive->ArcadeDrive(.40,-0,false);

		}else if (autonTimer->Get() >= 2)
		{
			drive->robotDrive->ArcadeDrive(0,0,false);

		}
	} else if (SwitchA->Get() == true && SwitchB->Get() == false && SwitchC->Get() == false ){
		//Pick up Crate directly in front, drive to auto zone - stop
		if (autonTimer->Get() < 2){

			int encod = Wikity->Get();
			if (encod > -750){
				if (TopLimit->Get() == false && BotLimit->Get() == false){
					elevator->speedController1->Set(-1);
				}
			}else if(encod <= -750){

				elevator->speedController1->Set(holding);
			}
		}else if (autonTimer->Get() < 3.75)
		{
			elevator->speedController1->Set(holding);
			drive->robotDrive->ArcadeDrive(.40,0.012,false);

		}else if (autonTimer->Get() >= 3.75)
		{
			drive->robotDrive->ArcadeDrive(0,0,false);

		}
	}else if (SwitchA->Get() == true && SwitchB->Get() == true && SwitchC->Get() == false ){
		//Pick up Crate, move to auto zone, set crate down- stop
		if (autonTimer->Get() < 2){

			int encod = Wikity->Get();
			while (encod > -150){
				if (TopLimit->Get() == false && BotLimit->Get() == false){
					elevator->speedController1->Set(-1);
				}
			}
		}else if (autonTimer->Get() < 5)
		{
			elevator->speedController1->Set(holding);
			drive->robotDrive->ArcadeDrive(.40,-0,false);

		}else if (autonTimer->Get() < 7)
		{
			drive->robotDrive->ArcadeDrive(0,0,false);
			int encod = Wikity->Get();
			while (encod < 400){
				if (TopLimit->Get() == false && BotLimit->Get() == false){
					elevator->speedController1->Set(1);
				}
			}
		}else if (autonTimer->Get() <= 9){
			elevator->speedController1->Set(0);
		}
	} else if (SwitchA->Get() == true && SwitchB->Get() == true && SwitchC->Get() == true ){
		//Pick up bin, move forward, set bin on crate, pick up crate / bin combo, turn 90 Degrees left, drive to auto zone, set done stack.

		//lift Bin
		if (autonTimer->Get() < 3){
			int encod = Wikity->Get();
			if (encod > -750){
				if (TopLimit->Get() == false && BotLimit->Get() == false){
					elevator->speedController1->Set(-1);
				}
			}else if(encod <= -2050){
				elevator->speedController1->Set(holding);
			}
			//Drive Forward to Box
		}else if (autonTimer->Get() < 4){
			elevator->speedController1->Set(holding);
			drive->robotDrive->ArcadeDrive(.18,0.012,false);
			//Stop and set down Bin
		}else if (autonTimer->Get() < 5){
			drive->robotDrive->ArcadeDrive(0,0,false);
			int encod = Wikity->Get();

				if (TopLimit->Get() == false && BotLimit->Get() == false){
					elevator->speedController1->Set(1);
				}
			}else if (autonTimer->Get() <5.9){
				elevator->speedController1->Set(holding);

			}
			//move back
		else if (autonTimer->Get() < 7.5){
			elevator->speedController1->Set(holding);
			drive->robotDrive->ArcadeDrive(-.10,0,false);
			// turn strait
		}else if (autonTimer->Get() < 9){
			drive->robotDrive->ArcadeDrive(0,-.058,false);
			//lower arm
			if (TopLimit->Get() == false && BotLimit->Get() == false){
				elevator->speedController1->Set(1);
				}
		}else if (autonTimer->Get() < 9.2){
			if (TopLimit->Get() == false && BotLimit->Get() == false){
							elevator->speedController1->Set(1);
							}
//Move forward
		}else if (autonTimer->Get() <10.6){
			elevator->speedController1->Set(holding);
			elevator->speedController1->Set(holding);
			drive->robotDrive->ArcadeDrive(.12,0.012,false);
			//Lift combo
		}else if (autonTimer->Get() < 12.6){
			int encod = Wikity->Get();
			//if (encod > -750){
				if (TopLimit->Get() == false){
					elevator->speedController1->Set(-1);
				}
		//	}else if(encod <= -750){
			//	elevator->speedController1->Set(holding);}
			//Turn 90 Left
		}else if (autonTimer->Get() < 13.5){
			elevator->speedController1->Set(holding);
			drive->robotDrive->ArcadeDrive(0,.15
					,false);
			//Drive to auto zone
		}else if (autonTimer->Get() < 15){
			elevator->speedController1->Set(holding);
			drive->robotDrive->ArcadeDrive(.20,0.012,false);
			//Stop and set down
		}else if (autonTimer->Get() < 16){
			int encod = Wikity->Get();
			if (encod > 400){
				if (TopLimit->Get() == false && BotLimit->Get() == false){
					elevator->speedController1->Set(1);
				}
			}else if(encod <= 400){
				elevator->speedController1->Set(holding);
			}
		}
	} else if (SwitchA->Get() == true && SwitchB->Get() == false && SwitchC->Get() == true ){
		//Pick up Crate directly in front, drive to auto zone (backwards) - stop
		if (autonTimer->Get() < 2){

			int encod = Wikity->Get();
			if (encod > -750){
				if (TopLimit->Get() == false && BotLimit->Get() == false){
					elevator->speedController1->Set(-1);
				}
			}else if(encod <= -750){

				elevator->speedController1->Set(holding);
			}
		}else if (autonTimer->Get() < 3.75)
		{
			elevator->speedController1->Set(holding);
			drive->robotDrive->ArcadeDrive(-.40,0.012,false);

		}else if (autonTimer->Get() >= 3.75)
		{
			drive->robotDrive->ArcadeDrive(0,0,false);

		}
}
	else if (SwitchA->Get() == false && SwitchB->Get() == true && SwitchC->Get() == true ){
			//move at an angle(starting at angle), go forward, pick up can, rotate to the left a little, put on top of crate, back off, go down, go forward, go up, back up into auto zone
			//forward
			if (autonTimer->Get() < 1){
				elevator->speedController1->Set(holding);
				drive->robotDrive->ArcadeDrive(.20,0.012,false);
			}
			//lift up
			else if (autonTimer->Get() < 3){
			drive->robotDrive->ArcadeDrive(0,0,false);
					int encod = Wikity->Get();
					while (encod < 400){
						if (TopLimit->Get() == false && BotLimit->Get() == false){
							elevator->speedController1->Set(1);
					}
				}
			}
			//turn left slightly to bin
			else if (autonTimer->Get() < 4){
					elevator->speedController1->Set(holding);
					drive->robotDrive->ArcadeDrive(0,.15,false);
			}
			//forward a little
			if (autonTimer->Get() < 4.75){
						elevator->speedController1->Set(holding);
						drive->robotDrive->ArcadeDrive(.20,0.012,false);
					}
			//set down can on bin
			else if (autonTimer->Get() < 6.25){
					drive->robotDrive->ArcadeDrive(0,0,false);
							int encod = Wikity->Get();
							while (encod > -750){
							if (TopLimit->Get() == false && BotLimit->Get() == false){
								elevator->speedController1->Set(-1);
					}
				}
			}
			//move backward
			else if (autonTimer->Get() < 7.15){
						elevator->speedController1->Set(holding);
						drive->robotDrive->ArcadeDrive(-.10,-0.012,false);

					}
			//move crane down
			else if (autonTimer->Get() < 9){
						int encod = Wikity->Get();

							if (TopLimit->Get() == false && BotLimit->Get() == false){
								elevator->speedController1->Set(1);
							}
			}
			//move forward
			if (autonTimer->Get() < 10){
						elevator->speedController1->Set(holding);
						drive->robotDrive->ArcadeDrive(.20,0.012,false);
					}
			//crane up
			else if (autonTimer->Get() < 12){
				drive->robotDrive->ArcadeDrive(0,0,false);
						int encod = Wikity->Get();
						while (encod > -750){
							if (TopLimit->Get() == false && BotLimit->Get() == false){
								elevator->speedController1->Set(-1);
						}
					}
				}
			//back up into autozone
			if (autonTimer->Get() < 15){
								elevator->speedController1->Set(holding);
								drive->robotDrive->ArcadeDrive(-.40,-0.012,false);
							}
		}
}

void Robot::TeleopInit() {
	// This makes sure that the autonomous stops running when
	// teleop starts running. If you want the autonomous to 
	// continue until interrupted by another command, remove
	// these lines or comment it out.
	if (autonomousCommand != NULL)
		autonomousCommand->Cancel();
}

void Robot::TeleopPeriodic() {
	Scheduler::GetInstance()->Run();
	oi->getJoystick1()->SetAxisChannel(Joystick::kYAxis, 1);

	int enc = Wikity->Get();
	SmartDashboard::PutNumber("EncValue",enc);
	SmartDashboard::PutNumber("PovVal",oi->getJoystick2()->GetPOV(0));

	SmartDashboard::PutBoolean("Top", TopLimit->Get());
	SmartDashboard::PutBoolean("Bottom", BotLimit->Get());
	SmartDashboard::PutBoolean("DI1", SwitchA->Get());
	SmartDashboard::PutBoolean("DI2", SwitchB->Get());
	SmartDashboard::PutBoolean("DI3", SwitchC->Get());
	//SmartDashboard::CheckDigitalChannel(2);
	//SmartDashboard::CheckDigitalChannel(3);
	//SmartDashboard::CheckDigitalChannel(4);

	float y =0;
	float x = 0;
	waka = oi->turbo->Get();
	if (waka == true){
	x = (oi->getJoystick1()->GetRawAxis(1));
	}else{
	x = (oi->getJoystick1()->GetRawAxis(1) *.75);
	}

	y = ((oi->getJoystick1()->GetRawAxis(4))*.45);
	if (x+ .1 > speed && x-.1 < speed){
		speed = x;
	} else if (x < speed){
		speed = x;
	} else if (x > speed){
		speed = speed +.05;
	}

	drive->robotDrive->ArcadeDrive(-speed,-y,true);

	if (TopLimit->Get() == false && BotLimit->Get() == false){
		elevator->speedController1->Set((oi->getJoystick2()->GetY())*2,0);
		}else
		if (TopLimit->Get() == true){
			elevator->speedController1->Set(.5);
		}else
		if (BotLimit->Get() == true){
				elevator->speedController1->Set(-.5);
			}

}


void Robot::TestPeriodic() {
	lw->Run();
}

START_ROBOT_CLASS(Robot);
